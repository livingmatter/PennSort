1. Add /SpikeSort and all its subfolders to the MATLAB path.

2. mex /Spike Fitting/reconstructSpike.c

3. Compile /Clustering/ascii2dump.c and /Clustering/optics.cc as standalone executables.

4. When using a new MEA, it will be necessary to create a "geometry" function. For examples,
   see Arrays/2F30EL/geom_2F30EL.m and Arrays/256/geom_256.m. This should take an electrode group
   number as input and return a matrix of x-y coordinates of all the electrodes in that group.
   It should also return a cell array, ChannelGroups, listing all the electrode numbers belonging to each
   group.

   This geometry function should then be fed into the constructor for the "array" variable in SpikeSort.m.

5. Write a loading function for your data. It should take in a raw data filename and return a Matlab array
   whose rows are the time series from each channel. It should perform any filtering you deem necessary. 
   For our data, see "new_LoadAndFilterPenn.m" This function then must be assigned to the variable, "loadfun"
   in SpikeSort.m.

6. Adjust parameters as needed. A list of parameters and where to find them follows:

Parameters preceded by * likely need to be changed.

Parameters preceded by ** probably only need to be changed if using 
a sampling rate different from ours (10 kHz). They all represent some time interval, 
measured in samples, so just multiply by the appropriate factor to maintain the same
time interval. Some may need to be further changed if the actual spikes have different
time scales than ours.

Parameters preceded by ? probably don't need to be changed,
but you should think about it.

------------
SpikeSort.m:
------------
**onewaveformlength            Length, in samples, of event clips
*numberchanns                  Number of electrodes
**ndecimate                    Factor by which to interpolate templates
*group                         If array has multiple electrode groups, which one to process
*filelen                       Length, in samples, of one raw data file.
*array                         Structure encoding array geometry. See note above.
*threshold                     Spike threshold
*noisethresh                   Noise threshold
?whiten                        Whether or not to spatially whiten

---------------------------------
Spike Extraction/extractSpikes.m:
---------------------------------
*filelen                       As above
*array                         As above
*ChannelGroups                 Cell array giving electrode numbers within each group

----------------------------------------
Statistics/getNoiseAndWhiteningFilter.m:
----------------------------------------
*ChannelGroups                 As above

--------------------------
Clustering/order_points.m:
--------------------------
optics_minpts                  OPTICS parameter which, roughly speaking, controls "fragmentation" of clusters (bigger means less fragmentation but you miss more small clusters)      
optics_eps                     OPTICS parameter which roughly sets an upper bound on distances between elemnts of the same cluster. Nothing lost by making it really big, except maybe some speed.
interpfactor                   Interpolation factor, only used for aligning spikes prior to clustering.

---------------------------
Clustering/makeTemplates.m:
---------------------------
?spikenbd                      Number of channels around peak to include in the template.
**ccwidth                      Maximum time shift to apply to events in aligning them for template building. Measured in samples.

--------------------------------
Statistics/updateClusterStats.m:
--------------------------------
alpha                          These are all hyperparameters for the conjugate priors used in 
beta                           inferring amplitude and firing rate statistics.
nu
lambda
a
b

-----------------------
Spike Fitting/preFit.m:
-----------------------
relevantthresh                  If a spike's amplitude is weaker than a template amplitude by more than this factor, don't bother trying to fit that template to the spike.
**correlationrange              Maximum time shift, relative to spike peak, to apply to templates in fitting. Measured in samples.
?widths                         Factors by which to stretch template widths. Maybe to get off the ground just try widths = [1] (no width fitting).

--------------------------
Spike Fitting/cmultifit.m:
--------------------------
adjmethod                       "fast" or "slow." Use "fast" unless you run out of memory.
**timewindow                    During fitting, spikes are temporally cropped to a window of this size around the peak.
*interestingVThresh             Fitting terminates if no voltage crosses this threshold.
?interestingRThresh             Fitting terminates if the probability ratio of the best fitting template doesn't exceed this threshold.
?NMaxFitSpike                   Maximum number of templates to fit to a given event.
?spikenbd                       Number of channels around peak to include in event being fit. See makeTemplates.m.
